<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="student-virtual-machine" name="Command line test" tests="15" failures="0" timestamp="23 Sep 2015 06:58:16 GMT" time="5.265" errors="0">
  <testcase name="@BeforeClass springTestContextPrepareTestInstance" time="0.0" classname="za.ac.cput.assets.repository.ItemTypeTest">
    <failure type="java.lang.IllegalStateException" message="Failed to load ApplicationContext">
      <![CDATA[java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:94)
	at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:72)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:170)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:110)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:212)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextPrepareTestInstance(AbstractTestNGSpringContextTests.java:145)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.sql.DataSource org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.dataSource; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration$NonEmbeddedConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'dataSource' threw exception; nested exception is java.lang.IllegalArgumentException: URL must start with 'jdbc'
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1210)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1119)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:956)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:747)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:686)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)
	at org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:101)
	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:68)
	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:86)
	... 39 more
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.sql.DataSource org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.dataSource; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration$NonEmbeddedConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'dataSource' threw exception; nested exception is java.lang.IllegalArgumentException: URL must start with 'jdbc'
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:561)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	... 63 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration$NonEmbeddedConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'dataSource' threw exception; nested exception is java.lang.IllegalArgumentException: URL must start with 'jdbc'
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1119)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1120)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1044)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:942)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:533)
	... 65 more
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'dataSource' threw exception; nested exception is java.lang.IllegalArgumentException: URL must start with 'jdbc'
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)
	... 77 more
Caused by: java.lang.IllegalArgumentException: URL must start with 'jdbc'
	at org.springframework.util.Assert.isTrue(Assert.java:65)
	at org.springframework.boot.autoconfigure.jdbc.DatabaseDriver.fromJdbcUrl(DatabaseDriver.java:125)
	at org.springframework.boot.autoconfigure.jdbc.DataSourceProperties.getDriverClassName(DataSourceProperties.java:129)
	at org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$NonEmbeddedConfiguration.dataSource(DataSourceAutoConfiguration.java:117)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
	... 78 more
... Removed 38 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeClass springTestContextPrepareTestInstance -->
  <testcase name="@BeforeMethod springTestContextBeforeTestMethod" time="0.0" classname="za.ac.cput.assets.repository.ItemTypeTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod springTestContextBeforeTestMethod -->
  <testcase name="@BeforeClass springTestContextBeforeTestClass" time="0.0" classname="za.ac.cput.assets.repository.OwnerCrudTest">
    <skipped/>
  </testcase> <!-- @BeforeClass springTestContextBeforeTestClass -->
  <testcase name="@BeforeClass springTestContextPrepareTestInstance" time="0.0" classname="za.ac.cput.assets.repository.OwnerCrudTest">
    <skipped/>
  </testcase> <!-- @BeforeClass springTestContextPrepareTestInstance -->
  <testcase name="@BeforeMethod springTestContextBeforeTestMethod" time="0.0" classname="za.ac.cput.assets.repository.OwnerCrudTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod springTestContextBeforeTestMethod -->
  <testcase name="@BeforeMethod setUp" time="0.0" classname="za.ac.cput.assets.repository.OwnerCrudTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod setUp -->
  <testcase name="@AfterMethod tearDown" time="0.0" classname="za.ac.cput.assets.repository.OwnerCrudTest">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase name="@BeforeClass springTestContextBeforeTestClass" time="0.0" classname="za.ac.cput.assets.repository.RegionTest">
    <skipped/>
  </testcase> <!-- @BeforeClass springTestContextBeforeTestClass -->
  <testcase name="@BeforeClass springTestContextPrepareTestInstance" time="0.0" classname="za.ac.cput.assets.repository.RegionTest">
    <skipped/>
  </testcase> <!-- @BeforeClass springTestContextPrepareTestInstance -->
  <testcase name="@BeforeMethod springTestContextBeforeTestMethod" time="0.0" classname="za.ac.cput.assets.repository.RegionTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod springTestContextBeforeTestMethod -->
  <testcase name="@BeforeClass springTestContextBeforeTestClass" time="0.0" classname="za.ac.cput.assets.repository.TypeCrudTest">
    <skipped/>
  </testcase> <!-- @BeforeClass springTestContextBeforeTestClass -->
  <testcase name="@BeforeClass springTestContextPrepareTestInstance" time="0.0" classname="za.ac.cput.assets.repository.TypeCrudTest">
    <skipped/>
  </testcase> <!-- @BeforeClass springTestContextPrepareTestInstance -->
  <testcase name="@BeforeMethod springTestContextBeforeTestMethod" time="0.0" classname="za.ac.cput.assets.repository.TypeCrudTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod springTestContextBeforeTestMethod -->
  <testcase name="create" time="0.002" classname="za.ac.cput.assets.repository.ItemTypeTest">
    <skipped/>
  </testcase> <!-- create -->
  <testcase name="create" time="0.0" classname="za.ac.cput.assets.repository.OwnerCrudTest">
    <skipped/>
  </testcase> <!-- create -->
  <testcase name="create" time="0.0" classname="za.ac.cput.assets.repository.RegionTest">
    <skipped/>
  </testcase> <!-- create -->
  <testcase name="create" time="0.0" classname="za.ac.cput.assets.repository.TypeCrudTest">
    <skipped/>
  </testcase> <!-- create -->
  <testcase name="read" time="0.0" classname="za.ac.cput.assets.repository.ItemTypeTest">
    <skipped/>
  </testcase> <!-- read -->
  <testcase name="read" time="0.0" classname="za.ac.cput.assets.repository.OwnerCrudTest">
    <skipped/>
  </testcase> <!-- read -->
  <testcase name="read" time="0.0" classname="za.ac.cput.assets.repository.RegionTest">
    <skipped/>
  </testcase> <!-- read -->
  <testcase name="read" time="0.0" classname="za.ac.cput.assets.repository.TypeCrudTest">
    <skipped/>
  </testcase> <!-- read -->
  <testcase name="update" time="0.0" classname="za.ac.cput.assets.repository.ItemTypeTest">
    <skipped/>
  </testcase> <!-- update -->
  <testcase name="update" time="0.0" classname="za.ac.cput.assets.repository.OwnerCrudTest">
    <skipped/>
  </testcase> <!-- update -->
  <testcase name="update" time="0.0" classname="za.ac.cput.assets.repository.RegionTest">
    <skipped/>
  </testcase> <!-- update -->
  <testcase name="update" time="0.0" classname="za.ac.cput.assets.repository.TypeCrudTest">
    <skipped/>
  </testcase> <!-- update -->
  <testcase name="delete" time="0.0" classname="za.ac.cput.assets.repository.ItemTypeTest">
    <skipped/>
  </testcase> <!-- delete -->
  <testcase name="delete" time="0.0" classname="za.ac.cput.assets.repository.RegionTest">
    <skipped/>
  </testcase> <!-- delete -->
  <testcase name="delete" time="0.0" classname="za.ac.cput.assets.repository.TypeCrudTest">
    <skipped/>
  </testcase> <!-- delete -->
</testsuite> <!-- Command line test -->
